#include "sdcard_operations.h"

/************************** Variable Definitions *****************************/
static FIL fil; /* File object */
static FIL fil2;
static FATFS fatfs;
/*
 * To test logical drive 0, FileName should be "0:/<File name>" or
 * "<file_name>". For logical drive 1, FileName should be "1:/<file_name>"
 */
static char FileName[32] = "Testing.bin";
static char *SD_File;
static char TextName[32] = "FileName.txt";
static char *SD_Text_File;

#ifdef __ICCARM__
#pragma data_alignment = 32
u8 DestinationAddress[10*1024];
#pragma data_alignment = 32
u8 DestAddr[32];
#pragma data_alignment = 32
u8 SourceAddress[10*1024];
#else
u8 DestinationAddress[10 * 1024] __attribute__ ((aligned(32)));
u8 SourceAddress[10 * 1024] __attribute__ ((aligned(32)));
u8 DestAddr[32] __attribute__ ((aligned(32)));
#endif

#define TEST 7

int cipher_text(void) {
	int Status;
	xil_printf("SD Polled File System Example Test \r\n");

	Status = FfsSdPolledExample();
	if (Status != XST_SUCCESS) {
		xil_printf("SD Polled File System Example Test failed \r\n");
		return XST_FAILURE;
	}

	xil_printf("Successfully ran SD Polled File System Example Test test \r\n");

	return XST_SUCCESS;

}

char * scan_files (char* path) {
    FRESULT res;
    DIR dir;
    static FILINFO fno;
    char * file_info;
    char buff[255];

    res = f_mount(&fatfs, path, 0);
    	if (res != FR_OK) {
    		print("mount");
    		return XST_FAILURE;
    	}
    //if (strstr(request, "favicon") != NULL) {
        // contains
   // }
    res = f_opendir(&dir, path);                       /* Open the directory */
    if (res == FR_OK) {
        for (;;) {
            res = f_readdir(&dir, &fno);                  /* Read a directory item */
            file_info = fno.fname;
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
            xil_printf("%s/%s\n", path, file_info);
            if (strstr(file_info, FILE_TO_CIPHER) != NULL) {
				xil_printf("%s/%s\n", path, file_info);
			}
        }
        f_closedir(&dir);
    }

    return file_info;
}

int FfsSdPolledExample(void) {
	FRESULT Res;
	UINT NumBytesRead;
	UINT NumBytesWritten;
	u32 BuffCnt;
	u32 FileSize = (1 * 1024);

	/*
	 * To test logical drive 0, Path should be "0:/"
	 * For logical drive 1, Path should be "1:/"
	 */
	TCHAR *Path = "0:/";

	for (BuffCnt = 0; BuffCnt < FileSize; BuffCnt++) {
		SourceAddress[BuffCnt] = TEST + BuffCnt;
	}

	/*
	 * Register volume work area, initialize device
	 */
	Res = f_mount(&fatfs, Path, 0);
	if (Res != FR_OK) {
		print("mount");
		return XST_FAILURE;
	}

	/*
	 * Open file with required permissions.
	 * Here - Creating new file with read/write permissions. .
	 * To open file with write permissions, file system should not
	 * be in Read Only mode.
	 */
	SD_File = (char *) FileName;
	SD_Text_File = (char *) TextName;

	// f_open(pointer to object(FIL), pointer to file name, open type)
	Res = f_open(&fil, SD_File, FA_OPEN_APPEND | FA_WRITE | FA_READ);
	if (Res) {
		print("open");
		return XST_FAILURE;
	}

	Res = f_open(&fil2, SD_Text_File, FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
	if (Res) {
		print("open");
		return XST_FAILURE;
	}

	/*
	 * Pointer to beginning of file .
	 */
	Res = f_lseek(&fil, 0);
	if (Res) {
		print("seek");
		return XST_FAILURE;
	}

	Res = f_lseek(&fil2, 0);
	if (Res) {
		print("seek");
		return XST_FAILURE;
	}


	for (int i = 0; i < f_size(&fil); i = i + SIZE_OF_READ) {
		Res = f_lseek(&fil, i);
		if (Res) {
			print("seek");
			return XST_FAILURE;
		}

		Res = f_lseek(&fil2, i);
		if (Res) {
			print("seek");
			return XST_FAILURE;
		}

		Res = f_read(&fil, (void*) DestAddr, SIZE_OF_READ, &NumBytesRead);

		if (Res) {
			print("read");
			return XST_FAILURE;
		}

		print(DestAddr);
		print("\n");

		Res = f_write(&fil2, DestAddr, SIZE_OF_READ, &NumBytesWritten);
		if (Res) {
			print("write");
			return XST_FAILURE;
		}
	}

	 /*
	 * Close file.
	 */
	Res = f_close(&fil);
	if (Res) {
		print("close");
		return XST_FAILURE;
	}

	Res = f_close(&fil2);
	if (Res) {
		print("close");
		return XST_FAILURE;
	}

	//Res = scan_files(Path);


	return XST_SUCCESS;
}
