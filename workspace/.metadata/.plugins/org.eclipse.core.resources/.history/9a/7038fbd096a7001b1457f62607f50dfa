#include "generation.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xil_types.h"
#include "xil_assert.h"
#include "xgpiops_hw.h"
#include "xgpio.h"
#include "sdcard_operations.h"
//#include "xbasic_types.h"
int main() {

	u32 data_out1;
	u32 data_out2;
	u32 data_in1;
	u32 data_in2;
	u32 data_key1;
	u32 data_key2;
	u32 data_key3;

	XGpio input, output;
	int button_data = 0;
	u32 led = 16711680;
	xil_printf("start\n");
	XGpio_Initialize(&input, XPAR_AXI_GPIO_0_DEVICE_ID);
	XGpio_Initialize(&output, XPAR_AXI_GPIO_2_DEVICE_ID);
	XGpio_SetDataDirection(&output, 1, 0xffffffff);
	XGpio_SetDataDirection(&input, 1, 0xffffffff);
	unsigned int key = key_to_integer();

	while (1) {
		button_data = XGpio_DiscreteRead(&input, 1);

		if (button_data == 0b0000) {

		} else if (button_data == 0b0001) {
			xil_printf("button 0\n");
			//generate_inicialization_vector(1);
			//0xe0 red left

			XGpio_DiscreteWrite(&output, 1, 0xff);

		} else if (button_data == 0b0010) {
			xil_printf("\nbutton 1\n");
			XGpio_DiscreteWrite(&output, 1, 0x0a);
			/**
			 const char * key = generate_key();
			 unsigned long int test = 1;
			 for (int i = 0; i < 4; ++i) {
			 test = key[i];
			 xil_printf("%02X", key[i]);
			 }
			 xil_printf("		%llu		%s\n", test, key);
			 **/
		} else if (button_data == 0b0100) {
			xil_printf("button 2\n");

			mount_drive();
			save_and_generate_vector();
			cipher_text_CFB_32bit();
			unmount_drive();
			xil_printf("end\n");

		} else if (button_data == 0b1000) {
			xil_printf("button 3\n");
			mount_drive();
			cipher_text_CFB_32bit();
			unmount_drive();
			xil_printf("end\n");
		}

		else {
			xil_printf("%X\n", button_data);
		}
	}

	//XPAR_LBLOCK_WRAPPER_0_S00_AXI_BASEADDR 0x43C00000

	return 0;
}
